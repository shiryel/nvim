-- BASED ON:
-- https://github.com/Kicamon/nvim/blob/main/colors/gruvbox.lua (MIT)
-- https://github.com/rebelot/kanagawa.nvim (MIT)
-- https://github.com/Rydwxz/bhs/blob/main/lua/black_hole_sun/theme.lua

if vim.g.colors_name then
  vim.cmd("hi clear")
end
vim.o.termguicolors = true

local colors = {
  bg0 = '#090618',
  bg1 = '#2a2a37',
  bg2 = '#363646',
  bg3 = '#4f4f57',
  bg4 = '#808084',

  fg0 = '#f0eddb',
  fg1 = '#cdcab4',
  fg2 = '#cac6ab',
  fg3 = '#b1a772',
  fg4 = '#8f8553',

  black = "#090618",
  gray = "#4f4f57",
  red = "#eb4343",
  green = "#98bb6c",
  yellow = "#e1bd7a",
  blue = "#7fb4ca",
  violet = "#7a69a3",
  cyan = "#6b9d93",
  white = "#cdcab4",

  bright_gray = "#808084",
  bright_red = "#ff152c",
  bright_green = "#abeb5c",
  bright_yellow = "#ffde45",
  bright_blue = "#4fcbff",
  bright_violet = "#998bbb",
  bright_cyan = "#7abdb0",
  bright_white = "#f0eddb",

  dblue = '#8ba4b0',
  orange = '#ff9711',
}

local function setcolor()
  local groups = {
    -- Symbols
    Comment = { fg = colors.bg4, italic = true },
    Boolean = { fg = colors.orange },
    Constant = { fg = colors.orange },
    Number = { fg = colors.violet },
    Float = { fg = colors.violet },
    String = { fg = colors.green, italic = true },
    Character = { fg = colors.green },
    Identifier = { fg = colors.dblue },
    Function = { fg = colors.blue },
    Statement = { fg = colors.bright_violet },
    Keyword = { fg = colors.bright_violet },
    Conditional = { fg = colors.bright_violet },
    Repeat = { fg = colors.bright_violet },
    Label = { fg = colors.yellow },
    Special = { fg = colors.yellow },
    Operator = { fg = colors.yellow },
    Type = { fg = colors.yellow },
    Typedef = { fg = colors.yellow },
    PreProc = { fg = colors.cyan },
    PreCondit = { fg = colors.cyan },
    Include = { fg = colors.cyan },
    Define = { fg = colors.cyan },
    Macro = { fg = colors.cyan },
    Structure = { fg = colors.cyan },
    Whitespace = { fg = colors.bg2 },
    Delimiter = { link = 'Function' },
    -- Base groups
    Normal = { fg = colors.fg1 },
    NormalFloat = { fg = colors.fg0, bg = 'NONE' },
    FloatWin = { fg = colors.fg0 },
    FloatBorder = { fg = colors.fg1 },
    NormalNC = { link = 'Normal' },
    CursorLine = { bg = colors.bg1 },
    CursorColumn = { link = 'CursorLine' },
    CursorWord = { underline = true },
    TabLineTop = { fg = colors.bg0, bg = colors.bg0, bold = true },
    TabLineSel = { fg = colors.fg1, bg = colors.bg0, bold = true },
    TabLine = { fg = colors.fg4, bg = colors.bg0, bold = true },
    TabLineFill = { fg = 'NONE', bg = 'NONE' },
    MatchParen = { bg = colors.bg3, bold = true },
    ColorColumn = { bg = colors.bg1 },
    Conceal = { fg = colors.dblue },
    CursorLineNr = { fg = colors.yellow },
    NonText = { fg = colors.bg2 },
    SpecialKey = { fg = colors.fg4 },
    Visual = { reverse = true },
    VisualNOS = { link = 'Visual' },
    Search = { fg = colors.yellow, bg = colors.bg0, reverse = true },
    IncSearch = { fg = colors.orange, bg = colors.bg0, reverse = true },
    CurSearch = { link = 'IncSearch' },
    QuickFixLine = { fg = colors.bg0, bg = colors.yellow, bold = true },
    Underlined = { fg = colors.dblue, underline = true },
    StatusLine = { fg = colors.bg0 },
    StatusLineNC = { fg = colors.bg0, reverse = true },
    WinBar = { fg = colors.fg4, bg = colors.bg0 },
    WinBarNC = { fg = colors.fg3, bg = colors.bg0 },
    WinSeparator = { fg = colors.bg3, bg = colors.bg0 },
    WildMenu = { fg = colors.dblue, bg = colors.bg2, bold = true },
    Directory = { fg = colors.dblue, bold = true },
    Title = { fg = colors.green, bold = true },
    ErrorMsg = { fg = colors.bg0, bg = colors.red, bold = true },
    MoreMsg = { fg = colors.yellow, bold = true },
    ModeMsg = { fg = colors.yellow, bold = true },
    Question = { fg = colors.orange, bold = true },
    WarningMsg = { fg = colors.red, bold = true },
    LineNr = { fg = colors.bg4 },
    SignColumn = { bg = colors.bg0 },
    Folded = { fg = colors.gray, bg = colors.bg1, italic = true },
    FoldColumn = { fg = colors.gray, bg = colors.bg1 },
    Cursor = { reverse = true },
    vCursor = { link = 'Cursor' },
    iCursor = { link = 'Cursor' },
    lCursor = { link = 'Cursor' },
    Error = { fg = colors.red, bold = true, reverse = true },
    Done = { fg = colors.orange, bold = true, italic = true },
    Exception = { fg = colors.red },
    StorageClass = { fg = colors.orange },
    DiffDelete = { fg = colors.red, bg = colors.bg0, reverse = true },
    DiffAdd = { fg = colors.green, bg = colors.bg0, reverse = true },
    DiffChange = { fg = colors.cyan, bg = colors.bg0, reverse = true },
    DiffText = { fg = colors.yellow, bg = colors.bg0, reverse = true },
    SpellCap = { undercurl = true, sp = colors.dblue },
    SpellBad = { undercurl = true, sp = colors.gray },
    SpellLocal = { undercurl = true, sp = colors.cyan },
    SpellRare = { undercurl = true, sp = colors.bright_violet },
    SnippetTabstop = { link = 'Normal' },
    -- LSP Diagnostic
    DiagnosticError = { fg = colors.red },
    DiagnosticSignError = { fg = colors.red },
    DiagnosticUnderlineError = { undercurl = true, sp = colors.red },
    DiagnosticWarn = { fg = colors.yellow },
    DiagnosticSignWarn = { fg = colors.yellow },
    DiagnosticUnderlineWarn = { undercurl = true, sp = colors.yellow },
    DiagnosticInfo = { fg = colors.dblue },
    DiagnosticSignInfo = { fg = colors.blue },
    DiagnosticUnderlineInfo = { undercurl = true, sp = colors.dblue },
    DiagnosticHint = { fg = colors.cyan },
    DiagnosticSignHint = { fg = colors.cyan },
    DiagnosticUnderlineHint = { undercurl = true, sp = colors.cyan },
    DiagnosticFloatingError = { fg = colors.red },
    DiagnosticFloatingWarn = { fg = colors.orange },
    DiagnosticFloatingInfo = { fg = colors.dblue },
    DiagnosticFloatingHint = { fg = colors.cyan },
    DiagnosticVirtualTextError = { fg = colors.red },
    DiagnosticVirtualTextWarn = { fg = colors.yellow },
    DiagnosticVirtualTextInfo = { fg = colors.dblue },
    DiagnosticVirtualTextHint = { fg = colors.cyan },
    LspReferenceRead = { fg = colors.yellow, bold = true },
    LspReferenceText = { fg = colors.yellow, bold = true },
    LspReferenceWrite = { fg = colors.orange, bold = true },
    LspCodeLens = { fg = colors.gray },
    LspSignatureActiveParameter = { link = 'Search' },
    -- gitcommit
    gitcommitSelectedFile = { fg = colors.green },
    gitcommitDiscardedFile = { fg = colors.red },
    -- gitsigns.nvim
    GitSignsAdd = { fg = colors.green },
    GitSignsChange = { fg = colors.violet },
    GitSignsDelete = { fg = colors.red },
    GitSignsAddLn = { fg = colors.green },
    GitSignsChangeLn = { fg = colors.violet },
    GitSignsDeleteLn = { fg = colors.red },
    -- diff
    diffAdded = { fg = colors.green },
    diffRemoved = { fg = colors.red },
    diffChanged = { fg = colors.cyan },
    diffFile = { fg = colors.orange },
    diffNewFile = { fg = colors.yellow },
    diffOldFile = { fg = colors.orange },
    diffLine = { fg = colors.dblue },
    diffIndexLine = { link = 'diffChanged' },
    -- lspsaga.nvim
    LspSagaCodeActionTitle = { link = 'Title' },
    LspSagaCodeActionBorder = { fg = colors.fg1 },
    LspSagaCodeActionContent = { fg = colors.green, bold = true },
    LspSagaLspFinderBorder = { fg = colors.fg1 },
    LspSagaAutoPreview = { fg = colors.orange },
    TargetWord = { fg = colors.dblue, bold = true },
    FinderSeparator = { fg = colors.cyan },
    LspSagaDefPreviewBorder = { fg = colors.dblue },
    LspSagaHoverBorder = { fg = colors.orange },
    LspSagaRenameBorder = { fg = colors.dblue },
    LspSagaDiagnosticSource = { fg = colors.orange },
    LspSagaDiagnosticBorder = { fg = colors.bright_violet },
    LspSagaDiagnosticHeader = { fg = colors.green },
    LspSagaSignatureHelpBorder = { fg = colors.green },
    SagaShadow = { fg = colors.bg0 },
    -- Indent
    IndentLine = { fg = colors.bg2 },
    IndentLineCurrent = { link = 'Comment' },
    -- StatusLine
    StatusLineMode = { fg = colors.fg2 },
    StatusLineFileInfo = { fg = colors.fg2 },
    StatusLineReadOnly = { fg = colors.red },
    StatusLineBranch = { fg = colors.violet },
    StatusLineLsp = { fg = colors.fg4 },
    StatusLineFilesize = { fg = colors.fg4 },
    StatusLineEncoding = { fg = colors.fg4 },
    StatlsLineLnum = { fg = colors.fg2 },
    -- pmenu
    Pmenu = { fg = '#C5C8C6', bg = '#383838' },
    PmenuSel = { bg = colors.bg2 },
    PmenuSbar = { bg = colors.bg2 },
    PmenuThumb = { bg = colors.bg4 },
    PmenuKind = { fg = colors.violet, bg = colors.bg2 },
    PmenuKindSel = { fg = colors.bg2, bg = colors.dblue, bold = true },
    PmenuExtra = { fg = colors.fg1, bg = colors.bg2 },
    PmenuExtraSel = { fg = colors.bg2, bg = colors.dblue, bold = true },
    -- cmp
    Cmp = { fg = '#C5C8C6' },
    CmpBorder = { fg = '#4ECCA3' },
    BlinkCmpMenu = { link = 'Cmp' },
    BlinkCmpMenuBorder = { link = 'CmpBorder' },
    BlinkCmpDoc = { link = 'Cmp' },
    BlinkCmpDocBorder = { link = 'CmpBorder' },
    BlinkCmpLabel = { link = 'Cmp' },
    BlinkCmpLabelMatch = { fg = colors.cyan, bold = true },
    BlinkCmpKind = { link = 'Cmp' },

    -- nvim-treesitter
    -- Todo         anything that needs extra attention; mostly the
    --              keywords TODO FIXME and NOTE
    ['@comment'] = { link = 'Comment' },
    ['@comment.note'] = { fg = colors.bg0, bg = colors.blue, bold = true, italic = true },
    ['@comment.todo'] = { fg = colors.bg0, bg = colors.yellow, bold = true, italic = true },
    ['@comment.error'] = { link = 'Error' },
    ['@none'] = { bg = 'NONE', fg = 'NONE' },
    ['@preproc'] = { link = 'PreProc' },
    ['@define'] = { link = 'Define' },
    ['@operator'] = { link = 'Operator' },
    ['@punctuation.delimiter'] = { link = 'Delimiter' },
    ['@punctuation.bracket'] = { link = 'Delimiter' },
    ['@punctuation.special'] = { link = 'Delimiter' },
    ['@string'] = { link = 'String' },
    ['@string.regex'] = { link = 'String' },
    ['@string.escape'] = { link = 'SpecialChar' },
    ['@string.special'] = { link = 'SpecialChar' },
    ['@character'] = { link = 'Character' },
    ['@character.special'] = { link = 'SpecialChar' },
    ['@boolean'] = { link = 'Boolean' },
    ['@number'] = { link = 'Number' },
    ['@float'] = { link = 'Float' },
    ['@function'] = { link = 'Function' },
    ['@function.builtin'] = { link = 'Special' },
    ['@function.call'] = { link = 'Function' },
    ['@function.macro'] = { link = 'Macro' },
    ['@method'] = { link = 'Function' },
    ['@method.call'] = { link = 'Function' },
    ['@constructor'] = { link = 'Special' },
    ['@parameter'] = { link = 'Identifier' },
    ['@keyword'] = { link = 'Keyword' },
    ['@keyword.conditional'] = { link = 'Conditional' },
    ['@keyword.debug'] = { link = 'Debug' },
    ['@keyword.directive'] = { link = 'PreProc' },
    ['@keyword.directive.define'] = { link = 'Define' },
    ['@keyword.exception'] = { link = 'Exception' },
    ['@keyword.function'] = { link = 'Keyword' },
    ['@keyword.import'] = { link = 'Include' },
    ['@keyword.operator'] = { link = 'Operator' },
    ['@keyword.repeat'] = { link = 'Repeat' },
    ['@keyword.return'] = { link = 'Keyword' },
    ['@keyword.storage'] = { link = 'StorageClass' },
    ['@conditional'] = { link = 'Conditional' },
    ['@repeat'] = { link = 'Repeat' },
    ['@debug'] = { link = 'Debug' },
    ['@label'] = { link = 'Label' },
    ['@include'] = { link = 'Include' },
    ['@exception'] = { link = 'Exception' },
    ['@type'] = { link = 'Type' },
    ['@type.builtin'] = { link = 'Type' },
    ['@type.definition'] = { link = 'Typedef' },
    ['@type.qualifier'] = { link = 'Type' },
    ['@storageclass'] = { link = 'StorageClass' },
    ['@attribute'] = { link = 'PreProc' },
    ['@field'] = { link = 'Identifier' },
    ['@property'] = { link = 'Identifier' },
    ['@variable'] = { link = 'Normal' },
    ['@variable.builtin'] = { link = 'Special' },
    ['@variable.member'] = { fg = colors.dblue },
    ['@constant'] = { link = 'Constant' },
    ['@constant.builtin'] = { link = 'Special' },
    ['@constant.macro'] = { link = 'Define' },
    ['@namespace'] = { fg = colors.fg1 },
    ['@symbol'] = { link = 'Identifier' },
    ['@text'] = { fg = colors.fg1 },
    ['@text.strong'] = { bold = true },
    ['@text.emphasis'] = { italic = true },
    ['@text.underline'] = { underline = true },
    ['@text.strike'] = { strikethrough = true },
    ['@text.title'] = { link = 'Title' },
    ['@text.literal'] = { link = 'String' },
    ['@text.uri'] = { link = 'Underlined' },
    ['@text.math'] = { link = 'Special' },
    ['@text.environment'] = { link = 'Macro' },
    ['@text.environment.name'] = { link = 'Type' },
    ['@text.reference'] = { link = 'Constant' },
    ['@text.note.comment'] = { fg = colors.red, bold = true },
    ['@text.warning'] = { link = 'WarningMsg' },
    ['@text.danger'] = { link = 'ErrorMsg' },
    ['@text.danger.comment'] = { fg = colors.fg0, bg = colors.red, bold = true },
    ['@text.diff.add'] = { link = 'diffAdded' },
    ['@text.diff.delete'] = { link = 'diffRemoved' },
    ['@tag'] = { link = 'Tag' },
    ['@tag.attribute'] = { link = 'Identifier' },
    ['@tag.delimiter'] = { link = 'Delimiter' },
    ['@punctuation'] = { link = 'Delimiter' },
    ['@macro'] = { link = 'Macro' },
    ['@structure'] = { link = 'Structure' },
    ['@lsp.type.class'] = { link = '@constructor' },
    ['@lsp.type.comment'] = {}, -- do not overwrite comments
    ['@lsp.type.decorator'] = { link = '@parameter' },
    ['@lsp.type.enum'] = { link = '@type' },
    ['@lsp.type.enumMember'] = { link = '@constant' },
    ['@lsp.type.function'] = { link = '@function' },
    ['@lsp.type.interface'] = { link = '@keyword' },
    ['@lsp.type.macro'] = { link = '@macro' },
    ['@lsp.type.method'] = { link = '@method' },
    ['@lsp.type.namespace'] = { link = '@namespace' },
    ['@lsp.type.parameter'] = { link = '@parameter' },
    ['@lsp.type.property'] = { link = '@property' },
    ['@lsp.type.struct'] = { link = '@constructor' },
    ['@lsp.type.type'] = { link = '@type' },
    ['@lsp.type.typeParameter'] = { link = '@type.definition' },
    ['@lsp.type.variable'] = { link = '@variable' },
  }

  return groups
end

local groups = setcolor()

-- add highlights
for group, settings in pairs(groups) do
  vim.api.nvim_set_hl(0, group, settings)
end
