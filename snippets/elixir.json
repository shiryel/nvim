{
  "genserver basic structure": {
    "prefix": "gen",
    "body": [
      "# Docs: https://hexdocs.pm/elixir/GenServer.html",
      "use GenServer",
      "",
      "@doc false",
      "def start_link(init_args) do",
      "  GenServer.start_link(__MODULE__, init_args, name: __MODULE__)",
      "end",
      "",
      "@impl true",
      "def init(state) do",
      "  {:ok, state}",
      "end"
    ]
  },
  "liveview basic structure": {
    "prefix": "live",
    "body": [
      "# Components: https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#components",
      "defmodule CoreWeb.${1}Live.${2:Index} do",
      "  use CoreWeb, :live_view",
      "",
      "  $0",
      "",
      "  import Temple",
      "  import Phoenix.LiveView.TagEngine, only: [component: 3, inner_block: 2]",
      "",
      "  @impl true",
      "  def mount(_params, _session, socket) do",
      "    #socket =",
      "    #  socket",
      "    #  |> assign(:uploaded_files, [])",
      "    #  |> allow_upload(:avatar, accept: ~w(.jpg .jpeg), max_entries: 5)",
      "",
      "    {:ok, stream(socket, :displays, Showcases.list_displays())}",
      "  end",
      "",
      "  @impl true",
      "  def render(%{live_action: _index} = assigns) do",
      "    temple do",
      "    end",
      "  end",
      "",
      "  @impl true",
      "  def handle_params(params, _url, socket) do",
      "    {:noreply, apply_action(params, socket.assigns.live_action, socket)}",
      "  end",
      "",
      "  defp apply_action(params, :index, socket) do",
      "    socket",
      "    |> assign(:page_title, \"Listing Displays\")",
      "  end",
      "",
      "  #@impl true",
      "  #def handle_info({_module, {:saved, form}}, socket) do",
      "  #  {:noreply, stream_insert(socket, :infos, form)}",
      "  #end",
      "",
      "  #@impl true",
      "  #def handle_event(\"delete\", %{\"id\" => id}, socket) do",
      "  #  {:noreply, stream_delete(socket, :infos, info)}",
      "  #end",
      "end"
    ]
  },
  "liveview live_component structure": {
    "prefix": "live_component",
    "body": [
      "defmodule CoreWeb.${1}Live.${2:Form}Component do",
      "  use CoreWeb, :live_component",
      "",
      "  $0",
      "",
      "  @impl true",
      "  def render(assigns) do",
      "    ~H\"\"\"",
      "    <div>",
      "      <.header>",
      "        <%= @title %>",
      "        <:subtitle>Use this form to manage display records in your database.</:subtitle>",
      "      </.header>",
      "",
      "      <.simple_form",
      "        for={@form}",
      "        id=\"display-form\"",
      "        phx-target={@myself}",
      "        phx-change=\"validate\"",
      "        phx-submit=\"save\"",
      "      >",
      "        <.input field={@form[:name]} type=\"text\" label=\"Name\" />",
      "        <.input field={@form[:description]} type=\"text\" label=\"Description\" />",
      "        <:actions>",
      "          <.button phx-disable-with=\"Saving...\">Save</.button>",
      "        </:actions>",
      "      </.simple_form>",
      "    </div>",
      "    \"\"\"",
      "  end",
      "",
      "  @impl true",
      "  def update(%{display: display} = assigns, socket) do",
      "    {:ok,",
      "     socket",
      "     |> assign(assigns)",
      "     |> assign_new(:form, fn ->",
      "       to_form(Showcases.change_display(display))",
      "     end)}",
      "  end",
      "",
      "  @impl true",
      "  def handle_event(\"validate\", %{\"display\" => display_params}, socket) do",
      "    changeset = Showcases.change_display(socket.assigns.display, display_params)",
      "    {:noreply, assign(socket, form: to_form(changeset, action: :validate))}",
      "  end",
      "",
      "  def handle_event(\"save\", %{\"display\" => display_params}, socket) do",
      "    save_display(socket, socket.assigns.action, display_params)",
      "  end",
      "",
      "  defp save_display(socket, :edit, display_params) do",
      "    case Showcases.update_display(socket.assigns.display, display_params) do",
      "      {:ok, display} ->",
      "        notify_parent({:saved, display})",
      "",
      "        {:noreply,",
      "         socket",
      "         |> put_flash(:info, \"Display updated successfully\")",
      "         |> push_patch(to: socket.assigns.patch)}",
      "",
      "      {:error, %Ecto.Changeset{} = changeset} ->",
      "        {:noreply, assign(socket, form: to_form(changeset))}",
      "    end",
      "  end",
      "",
      "  defp save_display(socket, :new, display_params) do",
      "    case Showcases.create_display(display_params) do",
      "      {:ok, display} ->",
      "        notify_parent({:saved, display})",
      "",
      "        {:noreply,",
      "         socket",
      "         |> put_flash(:info, \"Display created successfully\")",
      "         |> push_patch(to: socket.assigns.patch)}",
      "",
      "      {:error, %Ecto.Changeset{} = changeset} ->",
      "        {:noreply, assign(socket, form: to_form(changeset))}",
      "    end",
      "  end",
      "",
      "  defp notify_parent(msg), do: send(self(), {__MODULE__, msg})",
      "end"
    ]
  },
  "phoenix controller basic structure": {
    "prefix": "controller",
    "body": [
      "defmodule CoreWeb.PageController do",
      "  use CoreWeb, :controller",
      "",
      "  def home(conn, _params) do",
      "    # skip the default app layout",
      "    render(conn, :home, layout: false)",
      "  end",
      "end"
    ]
  },
  "ecto table basic structure": {
    "prefix": "ecto_struct",
    "body": [
      "# Types: https://hexdocs.pm/ecto/Ecto.Schema.html#module-primitive-types",
      "defmodule Core.${1:Context}.${2:Table} do",
      "  use Ecto.Schema",
      "  import Ecto.Changeset",
      "",
      "  @primary_key {:id, :binary_id, autogenerate: true}",
      "  @foreign_key_type :binary_id",
      "  schema \"${3:table}\" do",
      "    field :description, :string",
      "    field :name, :string",
      "    field :owner_id, :binary_id",
      "",
      "    timestamps(type: :utc_datetime)",
      "  end",
      "",
      "  @doc false",
      "  def changeset(display, attrs) do",
      "    display",
      "    |> cast(attrs, [:name, :description])",
      "    |> validate_required([:name, :description])",
      "  end",
      "end"
    ]
  },
  "ecto table basic structure": {
    "prefix": "ecto_migration",
    "body": [
      "# Types: https://hexdocs.pm/ecto/Ecto.Schema.html#module-primitive-types",
      "create table(:${1:users}, primary_key: false) do",
      "  add :id, :binary_id, primary_key: true",
      "  add :user_id, references(:users, type: :binary_id, on_delete: :delete_all), null: false",
      "  add :token, :binary, null: false",
      "  add :sent_to, :string",
      "",
      "  timestamps(type: :utc_datetime, updated_at: false)",
      "end",
      "",
      "create index(:${1:users}, [:user_id])",
      "create unique_index(:${1:users}, [:context, :token])",
      ""
    ]
  },
  "ecto schema basic structure": {
    "prefix": "ecto_schema",
    "body": [
      "# Types: https://hexdocs.pm/ecto/Ecto.Schema.html#module-primitive-types",
      "defmodule Core.${1:Accounts}.{2:Users} do",
      "  @moduledoc false",
      "",
      "  use Core.BaseSchema",
      "",
      "  schema \"${3:users}\" do",
      "    field :description, :string",
      "    field :name, :string",
      "    field :owner_id, :binary_id",
      "",
      "    timestamps(type: :utc_datetime)",
      "  end",
      "",
      "  @doc false",
      "  def changeset(${4:struct}, attrs) do",
      "    ${4:struct}",
      "    |> cast(attrs, [:name, :description])",
      "    |> validate_required([:name, :description])",
      "  end",
      "end"
    ]
  },
  "INIT base_schema.ex": {
    "prefix": "init_base_schema.ex",
    "body": [
      "defmodule Core.BaseSchema do",
      "  @moduledoc \"\"\"",
      "    Import common modules and setup attributes",
      "  \"\"\"",
      "",
      "  defmacro __using__(_opts) do",
      "    quote do",
      "      use Ecto.Schema",
      "      import Ecto.Changeset",
      "",
      "      @type t :: %unquote(__CALLER__.module){}",
      "",
      "      @primary_key {:id, :binary_id, autogenerate: true}",
      "      @foreign_key_type :binary_id",
      "    end",
      "  end",
      "end"
    ]
  }
}
